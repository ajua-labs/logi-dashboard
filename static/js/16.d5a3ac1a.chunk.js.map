{"version":3,"sources":["framework/Components/logi-table/EditableTableCell.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","_date_io_moment__WEBPACK_IMPORTED_MODULE_2__","_material_ui_pickers__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_4__","_material_ui_icons_ArrowForward__WEBPACK_IMPORTED_MODULE_5__","_material_ui_icons_ArrowForward__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_icons_ArrowBack__WEBPACK_IMPORTED_MODULE_6__","_material_ui_icons_ArrowBack__WEBPACK_IMPORTED_MODULE_6___default","EditableTableCell","props","editMode","column","readOnly","onDateInputChange","date","changeValue","toISOString","dataType","a","createElement","utils","DateFnsUtils","autoOk","value","dataRow","accessor","onChange","rightArrowIcon","leftArrowIcon","e","target","checked","getBool","type","Fragment","Date","toLocaleDateString","toLocaleString","toLocaleTimeString","toLowerCase"],"mappings":"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","file":"static/js/16.d5a3ac1a.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/moment\";\nimport {\n  DatePicker,\n  TimePicker,\n  DateTimePicker,\n  MuiPickersUtilsProvider\n} from \"@material-ui/pickers\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport { TableColumn } from \"./index\";\n\ninterface IEditableTableCell {\n  column: TableColumn;\n  editMode?: boolean;\n  dataRow: any;\n  changeValue: (newValue: any) => void;\n}\n\nfunction EditableTableCell(props: IEditableTableCell) {\n  if (props.editMode && !props.column.readOnly) {\n    const onDateInputChange = (date: any) =>\n      props.changeValue(date.toISOString());\n    switch (props.column.dataType) {\n      case \"Date\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              autoOk={true}\n              value={props.dataRow[props.column.accessor]}\n              onChange={onDateInputChange}\n              rightArrowIcon={<ArrowForward />}\n              leftArrowIcon={<ArrowBack />}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Time\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <TimePicker\n              value={props.dataRow[props.column.accessor]}\n              onChange={onDateInputChange}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"DateTime\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DateTimePicker\n              value={props.dataRow[props.column.accessor]}\n              onChange={onDateInputChange}\n              rightArrowIcon={<ArrowForward />}\n              leftArrowIcon={<ArrowBack />}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Boolean\":\n        return (\n          <Checkbox\n            onChange={e => {\n              props.changeValue(e.target.checked);\n            }}\n            checked={getBool()}\n          />\n        );\n      case \"Number\":\n      case \"String\":\n      default:\n        return (\n          <TextField\n            type={props.column.dataType === \"Number\" ? \"number\" : \"text\"}\n            value={props.dataRow[props.column.accessor]}\n            onChange={e => props.changeValue(e.target.value)}\n          />\n        );\n    }\n  } //read only mode\n  else {\n    switch (props.column.dataType) {\n      case \"Date\":\n        return (\n          <React.Fragment>\n            {new Date(\n              props.dataRow[props.column.accessor]\n            ).toLocaleDateString()}\n          </React.Fragment>\n        );\n      case \"DateTime\":\n        return (\n          <React.Fragment>\n            {new Date(props.dataRow[props.column.accessor]).toLocaleString()}\n          </React.Fragment>\n        );\n      case \"Time\":\n        return (\n          <React.Fragment>\n            {new Date(\n              props.dataRow[props.column.accessor]\n            ).toLocaleTimeString()}\n          </React.Fragment>\n        );\n      case \"Boolean\":\n        return <Checkbox checked={getBool()} />;\n      default:\n        return (\n          <React.Fragment>\n            {props.dataRow[props.column.accessor]}\n          </React.Fragment>\n        );\n    }\n  }\n\n  function getBool(): boolean | undefined {\n    switch (typeof props.dataRow[props.column.accessor]) {\n      case \"boolean\":\n        return props.dataRow[props.column.accessor];\n      case \"number\":\n        return props.dataRow[props.column.accessor] > 0 ? true : false;\n      case \"string\":\n        return (props.dataRow[\n          props.column.accessor\n        ] as string).toLowerCase() === \"true\"\n          ? true\n          : false;\n      default:\n        //a lot of times the type seems to be undefined!\n        return props.dataRow[props.column.accessor];\n    }\n  }\n}\n\nexport default EditableTableCell;\n"],"sourceRoot":""}