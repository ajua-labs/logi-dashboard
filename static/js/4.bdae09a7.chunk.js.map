{"version":3,"sources":["framework/Components/logi-table/LogiDataRow.tsx","framework/Components/logi-table/LogiTableToolbar.tsx","framework/Components/logi-table/EditableTableCell.tsx","framework/Components/logi-table/LogiTableHeader.tsx","framework/Components/logi-table/StandardActions.tsx","framework/Administration/Roles.tsx","../node_modules/@material-ui/icons/Edit.js","../node_modules/@material-ui/icons/Delete.js","framework/Components/logi-table/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","rowStyle","&:nth-of-type(odd)","backgroundColor","palette","background","default","LogiDataRow","props","classes","columns","index","labelId","concat","_useState","useState","_useState2","Object","_Users_Ashkan_Desktop_LogiPro_LogiDash_2019_06_05_dash_web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","editMode","setEditMode","_useState3","row","_useState4","setRow","changeValue","value","columnName","editedRow","_Users_Ashkan_Desktop_LogiPro_LogiDash_2019_06_05_dash_web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","setEditedRow","useEffect","rowStateAndAction","enterEditMode","discardEditMode","insertMode","oldData","newData","setData","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_3__","className","allowSelection","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_4__","padding","_material_ui_core__WEBPACK_IMPORTED_MODULE_7__","checked","inputProps","aria-labelledby","filter","c","hidden","map","colIndex","key","accessor","header","component","id","scope","dataType","viewComponent","_EditableTableCell__WEBPACK_IMPORTED_MODULE_8__","column","newValue","dataRow","__webpack_require__","r","__webpack_exports__","d","LogiTableToolbar","LogiStandardToolbar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_icons_Add__WEBPACK_IMPORTED_MODULE_5__","_material_ui_icons_Add__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_icons_Save__WEBPACK_IMPORTED_MODULE_6__","_material_ui_icons_Save__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_icons_Cancel__WEBPACK_IMPORTED_MODULE_7__","_material_ui_icons_Cancel__WEBPACK_IMPORTED_MODULE_7___default","root","paddingLeft","spacing","paddingRight","spacer","flex","actions","color","text","secondary","title","Fragment","undefined","insertNewRecord","actionsAndStates","onClick","insertedRecordData","discardInsertMode","enterInsertMode","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","_date_io_moment__WEBPACK_IMPORTED_MODULE_2__","_material_ui_pickers__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_4__","_material_ui_icons_ArrowForward__WEBPACK_IMPORTED_MODULE_5__","_material_ui_icons_ArrowForward__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_icons_ArrowBack__WEBPACK_IMPORTED_MODULE_6__","_material_ui_icons_ArrowBack__WEBPACK_IMPORTED_MODULE_6___default","EditableTableCell","readOnly","onDateInputChange","date","toISOString","utils","DateFnsUtils","autoOk","onChange","rightArrowIcon","leftArrowIcon","e","target","getBool","type","Date","toLocaleDateString","toLocaleString","toLocaleTimeString","toLowerCase","LogiTableHeader","onSelectAllClick","_React$useState","React","_React$useState2","_Users_Ashkan_Desktop_LogiPro_LogiDash_2019_06_05_dash_web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","order","setOrder","_React$useState3","_React$useState4","orderBy","setOrderBy","react__WEBPACK_IMPORTED_MODULE_1___default","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_2__","showSelectAll","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_6__","aria-label","col","sortDirection","allowSort","_material_ui_core_TableSortLabel__WEBPACK_IMPORTED_MODULE_5__","active","direction","clickedColumn","event","customSortFunction","isDesc","StandardActions","EditComp","DeleteComp","_material_ui_icons_Delete__WEBPACK_IMPORTED_MODULE_1__","_material_ui_icons_Delete__WEBPACK_IMPORTED_MODULE_1___default","_material_ui_icons_Edit__WEBPACK_IMPORTED_MODULE_2__","_material_ui_icons_Edit__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_icons_Save__WEBPACK_IMPORTED_MODULE_3__","_material_ui_icons_Save__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_icons_Cancel__WEBPACK_IMPORTED_MODULE_4__","_material_ui_icons_Cancel__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core__WEBPACK_IMPORTED_MODULE_9__","progress","marginLeft","marginRight","actionInProgress","size","saveChanges","deleteRecord","CommitButton","CancelButton","EditButton","DeleteButton","Roles","console","log","_Users_Ashkan_Desktop_LogiPro_LogiDash_2019_06_05_dash_web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","state","setstate","react__WEBPACK_IMPORTED_MODULE_3___default","_interopRequireDefault","defineProperty","exports","_react","_default","width","marginTop","paper","marginBottom","table","minWidth","tableWrapper","overflowX","LogiTable","page","setPage","rowsPerPage","setRowsPerPage","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","data","_useState9","_useState10","isError","setIsError","_useState11","_useState12","addingNewRecord","setAddingNewRecord","newlyAddedRow","fetchData","then","fetchedData","catch","refreshData","emptyRows","Math","min","length","_material_ui_pickers__WEBPACK_IMPORTED_MODULE_12__","MomentUtils","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_9__","tableToolbar","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_4__","dense","_LogiTableHeader__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_5__","_LogiDataRow__WEBPACK_IMPORTED_MODULE_11__","newRecord","forEach","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_6__","colSpan","rowSpan","align","_material_ui_core__WEBPACK_IMPORTED_MODULE_14__","slice","style","height","_material_ui_core_TablePagination__WEBPACK_IMPORTED_MODULE_7__","rowsPerPageOptions","count","backIconButtonProps","nextIconButtonProps","onChangePage","_event","newPage","onChangeRowsPerPage"],"mappings":"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","file":"static/js/4.bdae09a7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { TableColumn } from \"./index\";\nimport { Checkbox } from \"@material-ui/core\";\nimport EditableTableCell from \"./EditableTableCell\";\n\n/**\n *\n *\n * @export\n * @interface rowActionsAndStates\n */\nexport interface rowActionsAndStates {\n  /**\n   *Call this function to put the row in edit mode status\n   * @memberof rowActionsAndStates\n   */\n  enterEditMode: () => void;\n\n  /**\n   *Call this function to cancel the edit mode and return the row to reset status\n   * @memberof rowActionsAndStates\n   */\n  discardEditMode: () => void;\n\n  /**\n   *true if the row is in edit mode\n   * @type {boolean}\n   * @memberof rowActionsAndStates\n   */\n  editMode: boolean;\n  /**\n   * Original row data\n   * @type {*}\n   * @memberof rowActionsAndStates\n   */\n  oldData: any;\n  /**\n   * New Row Data (if it's modified)\n   * @type {*}\n   * @memberof rowActionsAndStates\n   */\n  newData: any;\n  /**\n   * Use this to set the row Data for example when a row is edited successfully and you want to replace the data\n   * without refreshing the whole content of the grid\n   * Note that this will set the the data in state and not whole table prop. i.e. if the page changes the row will reset\n   * BETTER OPTION IS TO REFRESH THE DATA FOR THE WHOLE GRID\n   * @memberof rowActionsAndStates\n   */\n  setData: (data: any) => void;\n  /**\n   * True when the record is a newly added record (not added yet!)\n   * @type {boolean}\n   * @memberof rowActionsAndStates\n   */\n  insertMode: boolean;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    rowStyle: {\n      \"&:nth-of-type(odd)\": {\n        backgroundColor: theme.palette.background.default\n      }\n    }\n  })\n);\n\nexport function LogiDataRow(props: {\n  columns: Array<TableColumn>;\n  index: number;\n  allowSelection?: boolean;\n  row: any;\n  insertMode?: boolean;\n  /**\n   * will be called everytime the record data is modified\n   */\n  setEditedRow?: (row: any) => void;\n}) {\n  const classes = useStyles();\n  const { columns, index } = props;\n  const labelId = `enhanced-table-checkbox-${index}`;\n  const [editMode, setEditMode] = useState(false);\n\n  const [row, setRow] = useState(props.row);\n  useEffect(() => {\n    setRow(props.row);\n  }, [props.row]);\n\n  function changeValue(value: any, columnName: string) {\n    var editedRow = { ...row };\n    editedRow[columnName] = value;\n    setRow(editedRow);\n    props.setEditedRow && props.setEditedRow(editedRow);\n  }\n  function resetRow() {\n    setRow(props.row);\n    props.setEditedRow && props.setEditedRow(props.row);\n  }\n\n  let rowStateAndAction: rowActionsAndStates = {\n    enterEditMode: () => {\n      setEditMode(true);\n    },\n    discardEditMode: () => {\n      setEditMode(false);\n      resetRow();\n    },\n    editMode: editMode || (props.insertMode ? props.insertMode : false),\n    oldData: props.row,\n    newData: row, // this will be modified data (in case user changes values)\n    setData: (newData: any) => {\n      setRow(newData);\n    },\n    insertMode: props.insertMode ? props.insertMode : false\n  };\n\n  return (\n    <TableRow className={classes.rowStyle}>\n      {props.allowSelection ? (\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            checked={false}\n            inputProps={{ \"aria-labelledby\": labelId }}\n          />\n        </TableCell>\n      ) : null}\n      {columns\n        .filter((c: TableColumn) => !c.hidden)\n        .map((c: TableColumn, colIndex: number) => {\n          if (colIndex === 0) {\n            return (\n              <TableCell\n                key={`${c.accessor ? c.accessor : c.header}${index}`}\n                component=\"th\"\n                id={labelId}\n                scope=\"row\"\n                padding=\"default\"\n              >\n                {props.insertMode &&\n                c.dataType === \"ActionColumn\" ? null : c.viewComponent ? (\n                  c.viewComponent(row, rowStateAndAction)\n                ) : (\n                  <EditableTableCell\n                    column={c}\n                    changeValue={(newValue: any) =>\n                      changeValue(newValue, c.accessor)\n                    }\n                    dataRow={row}\n                    editMode={editMode || props.insertMode}\n                  />\n                )}\n              </TableCell>\n            );\n          } else\n            return (\n              <TableCell key={`${c.accessor ? c.accessor : c.header}${index}`}>\n                {props.insertMode &&\n                c.dataType === \"ActionColumn\" ? null : c.viewComponent ? (\n                  c.viewComponent(row, rowStateAndAction)\n                ) : (\n                  <EditableTableCell\n                    column={c}\n                    changeValue={(newValue: any) =>\n                      changeValue(newValue, c.accessor)\n                    }\n                    dataRow={row}\n                    editMode={\n                      editMode || (props.insertMode ? props.insertMode : false)\n                    }\n                  />\n                )}\n              </TableCell>\n            );\n        })}\n    </TableRow>\n  );\n}\n","import React from \"react\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Toolbar,\n  IconButton\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toolbarActionsAndState } from \"./index\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1)\n    },\n    spacer: {\n      flex: \"1 1 100%\"\n    },\n    actions: {\n      color: theme.palette.text.secondary,\n      flex: \"0 0 auto\"\n    },\n    title: {\n      flex: \"0 0 auto\"\n    }\n  })\n);\n\nexport const LogiTableToolbar = (props: {\n  title?: string;\n  actions?: React.ReactElement;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Toolbar className={classes.root}>\n      <div className={classes.title}>{props.title}</div>\n      <div className={classes.spacer} />\n      <div className={classes.actions}>{props.actions}</div>\n    </Toolbar>\n  );\n};\n\nexport const LogiStandardToolbar = (props: {\n  title: string;\n  actionsAndStates: toolbarActionsAndState;\n  insertNewRecord: (recordData: any) => void;\n}) => {\n  let actions: React.ReactElement = <></>;\n  if (props.insertNewRecord !== undefined) {\n    actions = !props.actionsAndStates.insertMode ? (\n      <IconButton\n        color=\"secondary\"\n        onClick={props.actionsAndStates.enterInsertMode}\n        title=\"Add Record\"\n      >\n        <AddIcon />\n      </IconButton>\n    ) : (\n      <>\n        <IconButton\n          onClick={() => {\n            props.insertNewRecord(props.actionsAndStates.insertedRecordData());\n          }}\n          title=\"Save changes\"\n        >\n          <SaveIcon />\n        </IconButton>\n        <IconButton\n          color=\"secondary\"\n          onClick={props.actionsAndStates.discardInsertMode}\n          title=\"Cancel changes\"\n        >\n          <CancelIcon />\n        </IconButton>\n      </>\n    );\n  }\n\n  return <LogiTableToolbar title={props.title} actions={actions} />;\n};\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/moment\";\nimport {\n  DatePicker,\n  TimePicker,\n  DateTimePicker,\n  MuiPickersUtilsProvider\n} from \"@material-ui/pickers\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport { TableColumn } from \"./index\";\n\ninterface IEditableTableCell {\n  column: TableColumn;\n  editMode?: boolean;\n  dataRow: any;\n  changeValue: (newValue: any) => void;\n}\n\nfunction EditableTableCell(props: IEditableTableCell) {\n  if (props.editMode && !props.column.readOnly) {\n    const onDateInputChange = (date: any) =>\n      props.changeValue(date.toISOString());\n    switch (props.column.dataType) {\n      case \"Date\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              autoOk={true}\n              value={props.dataRow[props.column.accessor]}\n              onChange={onDateInputChange}\n              rightArrowIcon={<ArrowForward />}\n              leftArrowIcon={<ArrowBack />}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Time\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <TimePicker\n              value={props.dataRow[props.column.accessor]}\n              onChange={onDateInputChange}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"DateTime\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DateTimePicker\n              value={props.dataRow[props.column.accessor]}\n              onChange={onDateInputChange}\n              rightArrowIcon={<ArrowForward />}\n              leftArrowIcon={<ArrowBack />}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Boolean\":\n        return (\n          <Checkbox\n            onChange={e => {\n              props.changeValue(e.target.checked);\n            }}\n            checked={getBool()}\n          />\n        );\n      case \"Number\":\n      case \"String\":\n      default:\n        return (\n          <TextField\n            type={props.column.dataType === \"Number\" ? \"number\" : \"text\"}\n            value={props.dataRow[props.column.accessor]}\n            onChange={e => props.changeValue(e.target.value)}\n          />\n        );\n    }\n  } //read only mode\n  else {\n    switch (props.column.dataType) {\n      case \"Date\":\n        return (\n          <React.Fragment>\n            {new Date(\n              props.dataRow[props.column.accessor]\n            ).toLocaleDateString()}\n          </React.Fragment>\n        );\n      case \"DateTime\":\n        return (\n          <React.Fragment>\n            {new Date(props.dataRow[props.column.accessor]).toLocaleString()}\n          </React.Fragment>\n        );\n      case \"Time\":\n        return (\n          <React.Fragment>\n            {new Date(\n              props.dataRow[props.column.accessor]\n            ).toLocaleTimeString()}\n          </React.Fragment>\n        );\n      case \"Boolean\":\n        return <Checkbox checked={getBool()} />;\n      default:\n        return (\n          <React.Fragment>\n            {props.dataRow[props.column.accessor]}\n          </React.Fragment>\n        );\n    }\n  }\n\n  function getBool(): boolean | undefined {\n    switch (typeof props.dataRow[props.column.accessor]) {\n      case \"boolean\":\n        return props.dataRow[props.column.accessor];\n      case \"number\":\n        return props.dataRow[props.column.accessor] > 0 ? true : false;\n      case \"string\":\n        return (props.dataRow[\n          props.column.accessor\n        ] as string).toLowerCase() === \"true\"\n          ? true\n          : false;\n      default:\n        //a lot of times the type seems to be undefined!\n        return props.dataRow[props.column.accessor];\n    }\n  }\n}\n\nexport default EditableTableCell;\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Order, TableColumn } from \"./index\";\n\nexport function LogiTableHeader(props: {\n  onSelectAllClick?: any;\n  columns: TableColumn[];\n  customSortFunction?: any;\n  allowSelection?: boolean;\n  showSelectAll?: boolean;\n  allowSort?: boolean;\n}) {\n  const { onSelectAllClick, columns } = props;\n\n  const [order, setOrder] = React.useState<Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n\n  const createSortHandler = (clickedColumn: TableColumn) => (\n    event: React.MouseEvent<unknown>\n  ) => {\n    if (props.customSortFunction)\n      props.customSortFunction(event, clickedColumn);\n    else {\n      const isDesc = orderBy === clickedColumn.header && order === \"desc\";\n      setOrder(isDesc ? \"asc\" : \"desc\");\n      setOrderBy(clickedColumn.header);\n    }\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {props.allowSelection ? (\n          <TableCell padding=\"checkbox\">\n            {props.showSelectAll ? (\n              <Checkbox\n                //TODO: fix the checked state for select all\n                checked={true}\n                onChange={onSelectAllClick}\n                inputProps={{ \"aria-label\": \"Select all\" }}\n              />\n            ) : null}\n          </TableCell>\n        ) : null}\n        {columns.map(col =>\n          col.hidden ? null : (\n            <TableCell\n              key={col.accessor}\n              //align={col.dataType === 'Number' ? 'right' : 'left'}\n              //padding={col.disablePadding ? \"none\" : \"default\"}\n              sortDirection={orderBy === col.header ? order : false}\n            >\n              {props.allowSort && !(col.dataType === \"ActionColumn\") ? (\n                <TableSortLabel\n                  active={orderBy === col.header}\n                  direction={order}\n                  onClick={createSortHandler(col)}\n                >\n                  {col.header}\n                </TableSortLabel>\n              ) : (\n                col.header\n              )}\n            </TableCell>\n          )\n        )}\n      </TableRow>\n    </TableHead>\n  );\n}\n","import React from \"react\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport { rowActionsAndStates } from \"./index\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  CircularProgress\n} from \"@material-ui/core\";\n\nexport interface IStandardActionsAndStates extends rowActionsAndStates {\n  actionInProgress?: boolean;\n  saveChanges?: () => any;\n  deleteRecord?: () => any;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progress: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    }\n  })\n);\n\nexport function StandardActions(props: IStandardActionsAndStates) {\n  const classes = useStyles();\n  if (props.actionInProgress) {\n    return <CircularProgress size={30} className={classes.progress} />;\n  }\n  if (props.editMode) {\n    return <EditComp {...props} />;\n  }\n  return (\n    <>\n      {props.saveChanges !== undefined ? <EditComp {...props} /> : null}\n      {props.deleteRecord !== undefined ? <DeleteComp {...props} /> : null}\n    </>\n  );\n}\n\nexport function EditComp(props: IStandardActionsAndStates) {\n  if (!props.editMode) {\n    return (\n      <EditButton\n        onClick={() => {\n          props.enterEditMode();\n        }}\n      />\n    );\n  } else {\n    return (\n      <>\n        <CommitButton\n          onClick={(e: any) => {\n            props.saveChanges && props.saveChanges();\n          }}\n        />\n        <CancelButton\n          onClick={() => {\n            props.discardEditMode();\n          }}\n        />\n      </>\n    );\n  }\n}\nexport function DeleteComp(props: IStandardActionsAndStates) {\n  return (\n    <DeleteButton onClick={() => props.deleteRecord && props.deleteRecord()} />\n  );\n}\n\nconst EditButton = (props: any) => (\n  <IconButton onClick={props.onClick} title=\"Edit row\">\n    <EditIcon />\n  </IconButton>\n);\n\nconst DeleteButton = (props: any) => (\n  <IconButton onClick={props.onClick} title=\"Delete row\">\n    <DeleteIcon />\n  </IconButton>\n);\n\nconst CommitButton = (props: any) => (\n  <IconButton onClick={props.onClick} title=\"Save changes\">\n    <SaveIcon />\n  </IconButton>\n);\n\nconst CancelButton = (props: any) => (\n  <IconButton color=\"secondary\" onClick={props.onClick} title=\"Cancel changes\">\n    <CancelIcon />\n  </IconButton>\n);\n\nconst FailedButton = (props: any) => (\n  <Button color=\"primary\" onClick={props.onClick} title=\"Action Failed\">\n    Failed!\n  </Button>\n);\n\n/*export function StandardActions(props:any){\n      return ({newlyAdded ? (\n        <TableCell>New</TableCell>\n      ) : deleted ? (\n        <TableCell>DELETED</TableCell>\n      ) : actionInProgress ? (\n        <TableCell>\n          <CircularProgress size={30} className={classes.progress} />\n        </TableCell>\n      ) : actionSuccess && !actionSuccess ? (\n        <TableCell>\n          <FailedButton\n            onClick={() => {\n              //reset the row to original row\n              setEditMode(false);\n              setactionSuccess(undefined);\n              setActionInProgress(false);\n              setDeleted(false);\n              resetRow();\n            }}\n          />\n        </TableCell>\n      ) : editMode || props.addNewRecord ? (\n        <TableCell padding={\"checkbox\"}>\n          <CommitButton\n            onClick={() => {\n              if (props.addNewRecord) {\n                setActionInProgress(true);\n                props\n                  .addNewRecord(row)\n                  .then(result => {\n                    setactionSuccess(result);\n                    setActionInProgress(false);\n                    setEditMode(false);\n                    setNewlyAdded(true);\n                  })\n                  .catch(e => {\n                    console.log(e);\n                    setactionSuccess(false);\n                    setActionInProgress(false);\n                    setEditMode(false);\n                    resetRow();\n                  });\n              } else if (props.editRecord) {\n                setActionInProgress(true);\n                props\n                  .editRecord(props.row, row)\n                  .then(result => {\n                    setactionSuccess(result);\n                    setActionInProgress(false);\n                    setEditMode(false);\n                  })\n                  .catch(e => {\n                    console.log(e);\n                    setactionSuccess(false);\n                    setActionInProgress(false);\n                    setEditMode(false);\n                    resetRow();\n                  });\n              }\n            }}\n          />\n          <CancelButton\n            onClick={() => {\n              if (props.addNewRecord) {\n                props.addingNewRowCanceled && props.addingNewRowCanceled();\n              } else {\n                //reset the row to original row\n                setEditMode(false);\n                resetRow();\n              }\n            }}\n          />\n        </TableCell>\n      ) : allowEdit || allowDelete || allowAddNew ? (\n        <TableCell padding={\"checkbox\"}>\n          {allowEdit ? (\n            <EditButton\n              onClick={() => {\n                setEditMode(true);\n              }}\n            />\n          ) : null}\n          {allowDelete ? (\n            <DeleteButton\n              onClick={() => {\n                console.log(\"TODO:\");\n              }}\n            />\n          ) : null}\n        </TableCell>\n      ) : null})\n  }*/\n","import React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"../Contexts/AuthContext\";\nimport {\n  LogiTable,\n  TableColumn,\n  rowActionsAndStates,\n  toolbarActionsAndState,\n  LogiStandardToolbar\n} from \"../Components/logi-table\"; //\"logi-table\";\nimport { StandardActions } from \"../Components/logi-table/StandardActions\";\nimport { Checkbox } from \"@material-ui/core\";\n\ninterface IRolesProps {}\n\nconst Roles: React.FunctionComponent<IRolesProps> = function(props) {\n  console.log(\"in\");\n  const [state, setstate] = useState(0);\n  useEffect(() => {\n    setstate(state + 1);\n  }, []);\n  return <div>{state}</div>;\n};\n\nconst Roles1: React.FunctionComponent<IRolesProps> = function(props) {\n  const [roles, setRoles] = useState();\n  const [isLoadingRoles, setIsLoadingRoles] = useState(false);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const [selectedRoleID, setSelectedRoleID] = useState();\n  const Auth: any = useAuth();\n  useEffect(() => {\n    async function fetchRoles() {\n      setIsLoadingRoles(true);\n      //sending -1 as userID in order to get all Roles\n      var url = `${process.env.REACT_APP_APIURL}security/roles/-1`;\n      let roles = await Auth.AuthenticatedServerCall(url, \"GET\");\n      setRoles(roles);\n      setIsLoadingRoles(false);\n    }\n    fetchRoles();\n  }, [Auth]);\n\n  async function insertRole(newData: any) {\n    try {\n      if (!newData.Role || !newData.Description) {\n        return Promise.reject(\"Please fill all required fields\");\n      }\n      var url = `${process.env.REACT_APP_APIURL}security/roles`;\n\n      await Auth.AuthenticatedServerCall(url, \"POST\", {\n        Insert: ` (Role,Description,createdBy,CreatedAt)  SELECT '${newData.Role.trim()}' ,\n        '${newData.Description.trim()}'\n      , ${Auth.LoggedInUserID}, datetime(\"now\")`\n      });\n      return true;\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n  }\n\n  async function deleteRole(RoleID: any) {\n    var url = `${process.env.REACT_APP_APIURL}security/roles`;\n    await Auth.AuthenticatedServerCall(url, \"DELETE\", { RoleID: RoleID });\n    setRefreshTrigger(refreshTrigger ? refreshTrigger : 0 + 1);\n  }\n\n  const columns: TableColumn[] = [\n    {\n      header: \"Actions\",\n      accessor: \"ActionColumnOne\",\n      dataType: \"ActionColumn\",\n      viewComponent: (row: any, rowAsAndSs: rowActionsAndStates) => {\n        return (\n          <>\n            <Checkbox\n              checked={selectedRoleID === row.RoleID}\n              onClick={() => {\n                setSelectedRoleID(row.RoleID);\n              }}\n            />\n            <StandardActions\n              {...rowAsAndSs}\n              deleteRecord={(): void => {\n                if (\n                  window.confirm(\n                    `Are you sure you want to delete ${row.Role} ?`\n                  )\n                )\n                  deleteRole(row.RoleID);\n              }}\n            />\n          </>\n        );\n      }\n    },\n    {\n      header: \"RoleID\",\n      accessor: \"RoleID\",\n      dataType: \"Number\",\n      hidden: false,\n      readOnly: true\n    },\n    {\n      header: \"Role\",\n      accessor: \"Role\",\n      dataType: \"String\"\n    },\n    {\n      header: \"Description\",\n      accessor: \"Description\",\n      dataType: \"String\"\n    },\n    {\n      header: \"CreatedAt\",\n      accessor: \"CreatedAt\",\n      dataType: \"DateTime\"\n    }\n  ];\n  return (\n    <>\n      <LogiTable\n        dense={true}\n        allowSort={true}\n        columns={columns}\n        keyAccessor=\"RoleID\"\n        data={roles}\n        //allowSelection={true}\n        tableToolbar={(actionsAndStates: toolbarActionsAndState) => {\n          return (\n            <LogiStandardToolbar\n              actionsAndStates={actionsAndStates}\n              title={\"Roles\"}\n              insertNewRecord={async recordData => {\n                try {\n                  const newData: any = actionsAndStates.insertedRecordData();\n                  await insertRole(newData);\n                  setRefreshTrigger(refreshTrigger ? refreshTrigger : 0 + 1);\n                  actionsAndStates.discardInsertMode();\n                } catch (exception) {\n                  console.log(exception);\n                  alert(\"something went wrong, trying to save the data\");\n                }\n              }}\n            />\n          );\n        }}\n      />\n    </>\n  );\n};\n\nexport default Roles;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","import React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { LogiTableHeader } from \"./LogiTableHeader\";\nimport { LogiDataRow, rowActionsAndStates } from \"./LogiDataRow\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nexport * from \"./LogiDataRow\";\nexport * from \"./LogiTableToolbar\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      marginTop: theme.spacing(3)\n    },\n    paper: {\n      width: \"100%\",\n      marginBottom: theme.spacing(2)\n    },\n    table: {\n      minWidth: 750\n    },\n    tableWrapper: {\n      overflowX: \"auto\"\n    },\n    progress: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    }\n  })\n);\n\nexport type Order = \"asc\" | \"desc\";\nexport type DataType =\n  | \"String\"\n  | \"Number\"\n  | \"Date\"\n  | \"DateTime\"\n  | \"Time\"\n  | \"Boolean\"\n  | \"ActionColumn\";\n\nexport interface TableColumn {\n  header: string;\n  /**\n   * Used to access the data filed i.e. dataRow[accessor]\n   * Please note if this value is available then it will be used to create the key for table cells\n   * specially in case of action columns set this to a dummy value\n   * @type {string}\n   * @memberof TableColumn\n   */\n  accessor: string;\n  dataType: DataType;\n  readOnly?: boolean;\n  hidden?: boolean;\n  viewComponent?: (\n    rowData: any,\n    rowActionsAndStates: rowActionsAndStates\n  ) => React.ReactElement;\n}\n\nexport interface toolbarActionsAndState {\n  /**\n   *Call this function to put the row in edit mode status\n   * @memberof toolbarActionsAndState\n   */\n  enterInsertMode: () => void;\n\n  /**\n   *Call this function to cancel the insert mode and return the row to reset status\n   * @memberof toolbarActionsAndState\n   */\n  discardInsertMode: () => void;\n\n  /**\n   *true if the table is in insert mode\n   * @type {boolean}\n   * @memberof toolbarActionsAndState\n   */\n  insertMode: boolean;\n  /**\n   * newly insert record data\n   * @type {*}\n   * @memberof toolbarActionsAndState\n   */\n  insertedRecordData: () => any;\n}\n\nexport interface LogiTableProps {\n  keyAccessor: string;\n  columns: Array<TableColumn>;\n  data: Array<{}> | (() => Promise<Array<{}>>);\n  allowSelection?: boolean;\n  showSelectAll?: boolean;\n  allowSort?: boolean;\n  customSortFunction?: (\n    event: React.MouseEvent<unknown>,\n    property: TableColumn\n  ) => void;\n  onSelectAllClick?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => void;\n  dense?: boolean;\n  /**\n   * increase the counter from zero to refresh\n   * The value must change if you want the remote data to be re fetched\n   * @memberof LogiTableProps\n   */\n  refreshData?: number;\n  /**\n   * this component will be shown on top of the table\n   * you can import and use the LogiTableToolbar as standard if you want or create your own\n   * @memberof LogiTableProps\n   */\n  tableToolbar?: (\n    rowActionsAndStates: toolbarActionsAndState\n  ) => React.ReactElement;\n}\n\nexport function LogiTable(props: LogiTableProps) {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState([{}]);\n  const [isError, setIsError] = useState(false);\n  const [addingNewRecord, setAddingNewRecord] = useState(false);\n  let newlyAddedRow: any = undefined;\n\n  useEffect(() => {\n    console.log(\"setting data\");\n    //get data if passed as promise\n    if (typeof props.data === \"function\") {\n      let fetchData: () => Promise<Array<{}>> = props.data as () => Promise<\n        Array<{}>\n      >;\n      setIsLoading(true);\n      fetchData()\n        .then((fetchedData: Array<{}>) => {\n          setData(fetchedData);\n          setIsLoading(false);\n        })\n        .catch((c: any) => {\n          console.log(\"error: \" + c);\n          setIsLoading(false);\n          setIsError(true);\n        });\n    } else {\n      setData(props.data);\n      setIsLoading(false);\n    }\n  }, [props.data, props.refreshData]);\n\n  function handleChangePage(_event: unknown, newPage: number) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(event: React.ChangeEvent<HTMLInputElement>) {\n    setRowsPerPage(+event.target.value);\n  }\n\n  const emptyRows =\n    rowsPerPage -\n    (data ? Math.min(rowsPerPage, data.length - page * rowsPerPage) : 0);\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <div className={classes.tableWrapper}>\n            {props.tableToolbar\n              ? props.tableToolbar({\n                  enterInsertMode: () => {\n                    setAddingNewRecord(true);\n                  },\n                  discardInsertMode: () => {\n                    setAddingNewRecord(false);\n                  },\n                  insertMode: addingNewRecord,\n                  insertedRecordData: () => {\n                    return newlyAddedRow;\n                  }\n                })\n              : null}\n            <Table\n              className={classes.table}\n              aria-labelledby=\"tableTitle\"\n              size={props.dense ? \"small\" : \"medium\"}\n            >\n              <LogiTableHeader {...props} />\n              <TableBody>\n                {addingNewRecord && (\n                  <LogiDataRow\n                    key={-1}\n                    row={() => {\n                      let newRecord: any = {};\n                      props.columns\n                        .filter(c => c.dataType !== \"ActionColumn\")\n                        .forEach((col: TableColumn) => {\n                          newRecord[col.accessor] = \"\";\n                        });\n                      return newRecord;\n                    }}\n                    index={-1}\n                    columns={props.columns}\n                    allowSelection={false}\n                    insertMode={true}\n                    setEditedRow={(row: any) => {\n                      newlyAddedRow = row;\n                    }}\n                  />\n                )}\n                {isLoading || isError ? (\n                  <TableRow>\n                    <TableCell\n                      colSpan={\n                        props.columns.filter((c: TableColumn) => !c.hidden)\n                          .length\n                      }\n                      rowSpan={rowsPerPage}\n                      align={\"center\"}\n                    >\n                      <div>\n                        {isLoading ? (\n                          <CircularProgress\n                            size={30}\n                            className={classes.progress}\n                          />\n                        ) : (\n                          \"Failed to load data!\"\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  data && //making sure data is available\n                  data.length > 0 &&\n                  data\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row: any, index: number) => {\n                      return (\n                        <LogiDataRow\n                          key={index}\n                          row={row}\n                          index={index}\n                          columns={props.columns}\n                          allowSelection={props.allowSelection}\n                        />\n                      );\n                    })\n                )}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: 49 * emptyRows }}>\n                    <TableCell\n                      colSpan={\n                        props.columns.filter((c: TableColumn) => !c.hidden)\n                          .length\n                      }\n                    />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={data ? data.length : 0}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            backIconButtonProps={{\n              \"aria-label\": \"Previous Page\"\n            }}\n            nextIconButtonProps={{\n              \"aria-label\": \"Next Page\"\n            }}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </div>\n    </MuiPickersUtilsProvider>\n  );\n}\n"],"sourceRoot":""}